# Dokploy-Compatible Docker Compose for Redash
# No version specified (recommended for modern Docker Compose)
# Uses default bridge network (compatible with Dokploy)

x-redash-service: &redash-service
  image: redash/redash:latest
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy
  environment:
    REDASH_REDIS_URL: "redis://redis:6379/0"
    REDASH_DATABASE_URL: "postgresql://postgres@postgres/postgres"
    REDASH_CELERY_BROKER: "redis://redis:6379/0"
  restart: unless-stopped

services:
  server:
    <<: *redash-service
    command: server
    ports:
      - "${REDASH_PORT:-5001}:5000"
    environment:
      REDASH_WEB_WORKERS: 4
      REDASH_REDIS_URL: "redis://redis:6379/0"
      REDASH_DATABASE_URL: "postgresql://postgres@postgres/postgres"
      REDASH_CELERY_BROKER: "redis://redis:6379/0"
      REDASH_HOST: "${REDASH_HOST:-http://localhost:5001}"
      REDASH_SECRET_KEY: "${REDASH_SECRET_KEY:-change-me}"
      REDASH_COOKIE_SECRET: "${REDASH_COOKIE_SECRET:-change-me}"
      REDASH_WTF_CSRF_SECRET_KEY: "${REDASH_WTF_CSRF_SECRET_KEY:-change-me}"
      REDASH_LOG_LEVEL: "INFO"
      REDASH_ENFORCE_CSRF: "true"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  scheduler:
    <<: *redash-service
    command: scheduler
    environment:
      QUEUES: "celery"
      REDASH_REDIS_URL: "redis://redis:6379/0"
      REDASH_DATABASE_URL: "postgresql://postgres@postgres/postgres"
      REDASH_CELERY_BROKER: "redis://redis:6379/0"
      REDASH_HOST: "${REDASH_HOST:-http://localhost:5001}"
      REDASH_SECRET_KEY: "${REDASH_SECRET_KEY:-change-me}"
      REDASH_COOKIE_SECRET: "${REDASH_COOKIE_SECRET:-change-me}"
      REDASH_WTF_CSRF_SECRET_KEY: "${REDASH_WTF_CSRF_SECRET_KEY:-change-me}"

  scheduled_worker:
    <<: *redash-service
    command: worker
    environment:
      QUEUES: "scheduled_queries,schemas"
      WORKERS_COUNT: 1
      REDASH_REDIS_URL: "redis://redis:6379/0"
      REDASH_DATABASE_URL: "postgresql://postgres@postgres/postgres"
      REDASH_CELERY_BROKER: "redis://redis:6379/0"
      REDASH_HOST: "${REDASH_HOST:-http://localhost:5001}"
      REDASH_SECRET_KEY: "${REDASH_SECRET_KEY:-change-me}"
      REDASH_COOKIE_SECRET: "${REDASH_COOKIE_SECRET:-change-me}"
      REDASH_WTF_CSRF_SECRET_KEY: "${REDASH_WTF_CSRF_SECRET_KEY:-change-me}"

  adhoc_worker:
    <<: *redash-service
    command: worker
    environment:
      QUEUES: "queries"
      WORKERS_COUNT: 2
      REDASH_REDIS_URL: "redis://redis:6379/0"
      REDASH_DATABASE_URL: "postgresql://postgres@postgres/postgres"
      REDASH_CELERY_BROKER: "redis://redis:6379/0"
      REDASH_HOST: "${REDASH_HOST:-http://localhost:5001}"
      REDASH_SECRET_KEY: "${REDASH_SECRET_KEY:-change-me}"
      REDASH_COOKIE_SECRET: "${REDASH_COOKIE_SECRET:-change-me}"
      REDASH_WTF_CSRF_SECRET_KEY: "${REDASH_WTF_CSRF_SECRET_KEY:-change-me}"

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  postgres:
    image: postgres:13-alpine
    restart: unless-stopped
    environment:
      POSTGRES_HOST_AUTH_METHOD: "trust"
      POSTGRES_DB: "postgres"
      POSTGRES_USER: "postgres"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  postgres_data:
  redis_data:
