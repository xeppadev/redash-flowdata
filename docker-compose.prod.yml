x-redash-service: &redash-service
  image: redash/redash:latest
  restart: unless-stopped
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy
  networks:
    - redash-app

x-redash-environment: &redash-environment
  REDASH_HOST: "${REDASH_HOST:-http://localhost:5001}"
  REDASH_LOG_LEVEL: "INFO"
  REDASH_REDIS_URL: "redis://redis:6379/0"
  REDASH_DATABASE_URL: "postgresql://postgres@postgres/postgres"
  REDASH_CELERY_BROKER: "redis://redis:6379/0"
  REDASH_RATELIMIT_ENABLED: "true"
  REDASH_ENFORCE_CSRF: "true"
  REDASH_GUNICORN_TIMEOUT: 60
  REDASH_SECRET_KEY: "${REDASH_SECRET_KEY:-generate-a-secret-key}"
  REDASH_COOKIE_SECRET: "${REDASH_COOKIE_SECRET:-generate-a-cookie-secret}"
  REDASH_WTF_CSRF_SECRET_KEY: "${REDASH_WTF_CSRF_SECRET_KEY:-generate-a-csrf-secret}"

services:
  server:
    <<: *redash-service
    command: server
    ports:
      - "${REDASH_PORT:-5001}:5000"
    environment:
      <<: *redash-environment
      REDASH_WEB_WORKERS: 4
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  scheduler:
    <<: *redash-service
    command: scheduler
    environment:
      <<: *redash-environment
      QUEUES: "celery"

  scheduled_worker:
    <<: *redash-service
    command: worker
    environment:
      <<: *redash-environment
      QUEUES: "scheduled_queries,schemas"
      WORKERS_COUNT: "1"

  adhoc_worker:
    <<: *redash-service
    command: worker
    environment:
      <<: *redash-environment
      QUEUES: "queries"
      WORKERS_COUNT: "2"

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  postgres:
    image: postgres:13-alpine
    restart: unless-stopped
    environment:
      POSTGRES_HOST_AUTH_METHOD: "trust"
      POSTGRES_DB: "postgres"
      POSTGRES_USER: "postgres"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge
